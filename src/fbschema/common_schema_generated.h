// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMONSCHEMA_FBSCHEMA_H_
#define FLATBUFFERS_GENERATED_COMMONSCHEMA_FBSCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace fbschema {

struct BytesKeyValuePair;

struct ByteArray;

struct BytesKeyValuePair FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  const flatbuffers::Vector<uint8_t> *key() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_KEY);
  }
  flatbuffers::Vector<uint8_t> *mutable_key() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_KEY);
  }
  const flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  flatbuffers::Vector<uint8_t> *mutable_value() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyVector(key()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct BytesKeyValuePairBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> key) {
    fbb_.AddOffset(BytesKeyValuePair::VT_KEY, key);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(BytesKeyValuePair::VT_VALUE, value);
  }
  explicit BytesKeyValuePairBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BytesKeyValuePairBuilder &operator=(const BytesKeyValuePairBuilder &);
  flatbuffers::Offset<BytesKeyValuePair> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BytesKeyValuePair>(end);
    return o;
  }
};

inline flatbuffers::Offset<BytesKeyValuePair> CreateBytesKeyValuePair(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> key = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value = 0) {
  BytesKeyValuePairBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<BytesKeyValuePair> CreateBytesKeyValuePairDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *key = nullptr,
    const std::vector<uint8_t> *value = nullptr) {
  auto key__ = key ? _fbb.CreateVector<uint8_t>(*key) : 0;
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return fbschema::CreateBytesKeyValuePair(
      _fbb,
      key__,
      value__);
}

struct ByteArray FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ARRAY = 4
  };
  const flatbuffers::Vector<uint8_t> *array() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ARRAY);
  }
  flatbuffers::Vector<uint8_t> *mutable_array() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_ARRAY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ARRAY) &&
           verifier.VerifyVector(array()) &&
           verifier.EndTable();
  }
};

struct ByteArrayBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_array(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> array) {
    fbb_.AddOffset(ByteArray::VT_ARRAY, array);
  }
  explicit ByteArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ByteArrayBuilder &operator=(const ByteArrayBuilder &);
  flatbuffers::Offset<ByteArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ByteArray>(end);
    return o;
  }
};

inline flatbuffers::Offset<ByteArray> CreateByteArray(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> array = 0) {
  ByteArrayBuilder builder_(_fbb);
  builder_.add_array(array);
  return builder_.Finish();
}

inline flatbuffers::Offset<ByteArray> CreateByteArrayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *array = nullptr) {
  auto array__ = array ? _fbb.CreateVector<uint8_t>(*array) : 0;
  return fbschema::CreateByteArray(
      _fbb,
      array__);
}

}  // namespace fbschema

#endif  // FLATBUFFERS_GENERATED_COMMONSCHEMA_FBSCHEMA_H_
