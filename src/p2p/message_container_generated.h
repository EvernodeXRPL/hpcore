// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGECONTAINER_P2P_H_
#define FLATBUFFERS_GENERATED_MESSAGECONTAINER_P2P_H_

#include "flatbuffers/flatbuffers.h"

#include "message_content_generated.h"

namespace p2p {

struct Container;

struct Container FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_TIMESTAMP = 6,
    VT_PUBKEY = 8,
    VT_SIGNATURE = 10,
    VT_CONTENT = 12
  };
  uint16_t version() const {
    return GetField<uint16_t>(VT_VERSION, 0);
  }
  bool mutate_version(uint16_t _version) {
    return SetField<uint16_t>(VT_VERSION, _version, 0);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool mutate_timestamp(uint64_t _timestamp) {
    return SetField<uint64_t>(VT_TIMESTAMP, _timestamp, 0);
  }
  const flatbuffers::Vector<uint8_t> *pubkey() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PUBKEY);
  }
  flatbuffers::Vector<uint8_t> *mutable_pubkey() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_PUBKEY);
  }
  const flatbuffers::Vector<uint8_t> *signature() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SIGNATURE);
  }
  flatbuffers::Vector<uint8_t> *mutable_signature() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_SIGNATURE);
  }
  const flatbuffers::Vector<uint8_t> *content() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CONTENT);
  }
  flatbuffers::Vector<uint8_t> *mutable_content() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_CONTENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VERSION) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_PUBKEY) &&
           verifier.VerifyVector(pubkey()) &&
           VerifyOffset(verifier, VT_SIGNATURE) &&
           verifier.VerifyVector(signature()) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           verifier.VerifyVector(content()) &&
           verifier.EndTable();
  }
};

struct ContainerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint16_t version) {
    fbb_.AddElement<uint16_t>(Container::VT_VERSION, version, 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(Container::VT_TIMESTAMP, timestamp, 0);
  }
  void add_pubkey(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> pubkey) {
    fbb_.AddOffset(Container::VT_PUBKEY, pubkey);
  }
  void add_signature(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature) {
    fbb_.AddOffset(Container::VT_SIGNATURE, signature);
  }
  void add_content(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> content) {
    fbb_.AddOffset(Container::VT_CONTENT, content);
  }
  explicit ContainerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ContainerBuilder &operator=(const ContainerBuilder &);
  flatbuffers::Offset<Container> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Container>(end);
    return o;
  }
};

inline flatbuffers::Offset<Container> CreateContainer(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t version = 0,
    uint64_t timestamp = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> pubkey = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> content = 0) {
  ContainerBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_content(content);
  builder_.add_signature(signature);
  builder_.add_pubkey(pubkey);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<Container> CreateContainerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t version = 0,
    uint64_t timestamp = 0,
    const std::vector<uint8_t> *pubkey = nullptr,
    const std::vector<uint8_t> *signature = nullptr,
    const std::vector<uint8_t> *content = nullptr) {
  auto pubkey__ = pubkey ? _fbb.CreateVector<uint8_t>(*pubkey) : 0;
  auto signature__ = signature ? _fbb.CreateVector<uint8_t>(*signature) : 0;
  auto content__ = content ? _fbb.CreateVector<uint8_t>(*content) : 0;
  return p2p::CreateContainer(
      _fbb,
      version,
      timestamp,
      pubkey__,
      signature__,
      content__);
}

inline const p2p::Container *GetContainer(const void *buf) {
  return flatbuffers::GetRoot<p2p::Container>(buf);
}

inline const p2p::Container *GetSizePrefixedContainer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<p2p::Container>(buf);
}

inline Container *GetMutableContainer(void *buf) {
  return flatbuffers::GetMutableRoot<Container>(buf);
}

inline bool VerifyContainerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<p2p::Container>(nullptr);
}

inline bool VerifySizePrefixedContainerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<p2p::Container>(nullptr);
}

inline void FinishContainerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<p2p::Container> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedContainerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<p2p::Container> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace p2p

#endif  // FLATBUFFERS_GENERATED_MESSAGECONTAINER_P2P_H_
