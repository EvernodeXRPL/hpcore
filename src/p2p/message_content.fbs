//IDL file for p2p message content schema.
namespace p2p;

table StringKeyValuePair { //flatbuff equivalent for dictionary/hashmap for <byte>
    key:[ubyte]; 
    value:[ubyte]; 
 }

 table ByteArray { //To represent list of byte arrays
     array:[ubyte];
 }

union Message { Proposal_Message, Npl_Message } //message content type

table Content { 
    message:Message;
}

table Proposal_Message { //Proposal type message schema
    pubkey:[ubyte];
    timestamp:uint64;
    stage: int8;
    time:uint64;
    lcl:[ubyte];
    users: [ByteArray];
    raw_inputs: [StringKeyValuePair];   //stage 0 inputs 
    hash_inputs:[ByteArray];            //stage > 0 inputs (hash of satge 0 inputs)
    raw_outputs: [StringKeyValuePair];  //stage 0 outputs 
    hash_outputs:[ByteArray];           //stage > 0 outputs (hash of satge 0 outputs)
    state: State;
}

table Npl_Message { //NPL type message schema
    pubkey:[ubyte];
    timestamp:uint64;
    data:[ubyte];
    lcl:[ubyte];
}

table StateDifference { //Represent state difference by tracking created,updated and deleted state files.
    created: [StringKeyValuePair]; //list of { fn => hash }
    updated: [StringKeyValuePair]; 
    deleted: [StringKeyValuePair]; 
}

table State {
    previous: [ubyte];  // hash of the previous state
    current: [ubyte];  //  hash of the current state
    difference: StateDifference; 
    patch: [StringKeyValuePair];   // fn -> bsdiff patch going from previous state to new state
}

root_type Content; //root type for message content