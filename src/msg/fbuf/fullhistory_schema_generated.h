// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FULLHISTORYSCHEMA_MSG_FBUF_LEDGER_H_
#define FLATBUFFERS_GENERATED_FULLHISTORYSCHEMA_MSG_FBUF_LEDGER_H_

#include "flatbuffers/flatbuffers.h"

namespace msg {
namespace fbuf {
namespace ledger {

struct FullHistoryBlock;
struct FullHistoryBlockBuilder;

struct RawInput;
struct RawInputBuilder;

struct FullHistoryBlock FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FullHistoryBlockBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RAW_INPUTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ledger::RawInput>> *raw_inputs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ledger::RawInput>> *>(VT_RAW_INPUTS);
  }
  flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ledger::RawInput>> *mutable_raw_inputs() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ledger::RawInput>> *>(VT_RAW_INPUTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RAW_INPUTS) &&
           verifier.VerifyVector(raw_inputs()) &&
           verifier.VerifyVectorOfTables(raw_inputs()) &&
           verifier.EndTable();
  }
};

struct FullHistoryBlockBuilder {
  typedef FullHistoryBlock Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_raw_inputs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ledger::RawInput>>> raw_inputs) {
    fbb_.AddOffset(FullHistoryBlock::VT_RAW_INPUTS, raw_inputs);
  }
  explicit FullHistoryBlockBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FullHistoryBlock> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FullHistoryBlock>(end);
    return o;
  }
};

inline flatbuffers::Offset<FullHistoryBlock> CreateFullHistoryBlock(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ledger::RawInput>>> raw_inputs = 0) {
  FullHistoryBlockBuilder builder_(_fbb);
  builder_.add_raw_inputs(raw_inputs);
  return builder_.Finish();
}

inline flatbuffers::Offset<FullHistoryBlock> CreateFullHistoryBlockDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<msg::fbuf::ledger::RawInput>> *raw_inputs = nullptr) {
  auto raw_inputs__ = raw_inputs ? _fbb.CreateVector<flatbuffers::Offset<msg::fbuf::ledger::RawInput>>(*raw_inputs) : 0;
  return msg::fbuf::ledger::CreateFullHistoryBlock(
      _fbb,
      raw_inputs__);
}

struct RawInput FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RawInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HASH = 4,
    VT_PUBKEY = 6,
    VT_INPUT = 8
  };
  const flatbuffers::Vector<uint8_t> *hash() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_HASH);
  }
  flatbuffers::Vector<uint8_t> *mutable_hash() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_HASH);
  }
  const flatbuffers::Vector<uint8_t> *pubkey() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PUBKEY);
  }
  flatbuffers::Vector<uint8_t> *mutable_pubkey() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_PUBKEY);
  }
  const flatbuffers::Vector<uint8_t> *input() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_INPUT);
  }
  flatbuffers::Vector<uint8_t> *mutable_input() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_INPUT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HASH) &&
           verifier.VerifyVector(hash()) &&
           VerifyOffset(verifier, VT_PUBKEY) &&
           verifier.VerifyVector(pubkey()) &&
           VerifyOffset(verifier, VT_INPUT) &&
           verifier.VerifyVector(input()) &&
           verifier.EndTable();
  }
};

struct RawInputBuilder {
  typedef RawInput Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hash(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash) {
    fbb_.AddOffset(RawInput::VT_HASH, hash);
  }
  void add_pubkey(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> pubkey) {
    fbb_.AddOffset(RawInput::VT_PUBKEY, pubkey);
  }
  void add_input(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> input) {
    fbb_.AddOffset(RawInput::VT_INPUT, input);
  }
  explicit RawInputBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RawInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RawInput>(end);
    return o;
  }
};

inline flatbuffers::Offset<RawInput> CreateRawInput(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> pubkey = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> input = 0) {
  RawInputBuilder builder_(_fbb);
  builder_.add_input(input);
  builder_.add_pubkey(pubkey);
  builder_.add_hash(hash);
  return builder_.Finish();
}

inline flatbuffers::Offset<RawInput> CreateRawInputDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *hash = nullptr,
    const std::vector<uint8_t> *pubkey = nullptr,
    const std::vector<uint8_t> *input = nullptr) {
  auto hash__ = hash ? _fbb.CreateVector<uint8_t>(*hash) : 0;
  auto pubkey__ = pubkey ? _fbb.CreateVector<uint8_t>(*pubkey) : 0;
  auto input__ = input ? _fbb.CreateVector<uint8_t>(*input) : 0;
  return msg::fbuf::ledger::CreateRawInput(
      _fbb,
      hash__,
      pubkey__,
      input__);
}

inline const msg::fbuf::ledger::FullHistoryBlock *GetFullHistoryBlock(const void *buf) {
  return flatbuffers::GetRoot<msg::fbuf::ledger::FullHistoryBlock>(buf);
}

inline const msg::fbuf::ledger::FullHistoryBlock *GetSizePrefixedFullHistoryBlock(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<msg::fbuf::ledger::FullHistoryBlock>(buf);
}

inline FullHistoryBlock *GetMutableFullHistoryBlock(void *buf) {
  return flatbuffers::GetMutableRoot<FullHistoryBlock>(buf);
}

inline bool VerifyFullHistoryBlockBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<msg::fbuf::ledger::FullHistoryBlock>(nullptr);
}

inline bool VerifySizePrefixedFullHistoryBlockBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<msg::fbuf::ledger::FullHistoryBlock>(nullptr);
}

inline void FinishFullHistoryBlockBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<msg::fbuf::ledger::FullHistoryBlock> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFullHistoryBlockBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<msg::fbuf::ledger::FullHistoryBlock> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ledger
}  // namespace fbuf
}  // namespace msg

#endif  // FLATBUFFERS_GENERATED_FULLHISTORYSCHEMA_MSG_FBUF_LEDGER_H_
