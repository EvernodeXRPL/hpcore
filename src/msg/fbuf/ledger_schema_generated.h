// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LEDGERSCHEMA_MSG_FBUF_LEDGER_H_
#define FLATBUFFERS_GENERATED_LEDGERSCHEMA_MSG_FBUF_LEDGER_H_

#include "flatbuffers/flatbuffers.h"

#include "common_schema_generated.h"

namespace msg {
namespace fbuf {
namespace ledger {

struct LedgerBlock;
struct LedgerBlockBuilder;

struct LedgerBlock FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LedgerBlockBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_SEQ_NO = 6,
    VT_TIME = 8,
    VT_LCL = 10,
    VT_STATE_HASH = 12,
    VT_PATCH_HASH = 14,
    VT_USERS = 16,
    VT_INPUTS = 18,
    VT_OUTPUT = 20
  };
  const flatbuffers::String *version() const {
    return GetPointer<const flatbuffers::String *>(VT_VERSION);
  }
  flatbuffers::String *mutable_version() {
    return GetPointer<flatbuffers::String *>(VT_VERSION);
  }
  uint64_t seq_no() const {
    return GetField<uint64_t>(VT_SEQ_NO, 0);
  }
  bool mutate_seq_no(uint64_t _seq_no) {
    return SetField<uint64_t>(VT_SEQ_NO, _seq_no, 0);
  }
  uint64_t time() const {
    return GetField<uint64_t>(VT_TIME, 0);
  }
  bool mutate_time(uint64_t _time) {
    return SetField<uint64_t>(VT_TIME, _time, 0);
  }
  const flatbuffers::Vector<uint8_t> *lcl() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_LCL);
  }
  flatbuffers::Vector<uint8_t> *mutable_lcl() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_LCL);
  }
  const flatbuffers::Vector<uint8_t> *state_hash() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_STATE_HASH);
  }
  flatbuffers::Vector<uint8_t> *mutable_state_hash() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_STATE_HASH);
  }
  const flatbuffers::Vector<uint8_t> *patch_hash() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PATCH_HASH);
  }
  flatbuffers::Vector<uint8_t> *mutable_patch_hash() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_PATCH_HASH);
  }
  const flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>> *users() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>> *>(VT_USERS);
  }
  flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>> *mutable_users() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>> *>(VT_USERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>> *inputs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>> *>(VT_INPUTS);
  }
  flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>> *mutable_inputs() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<uint8_t> *output() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_OUTPUT);
  }
  flatbuffers::Vector<uint8_t> *mutable_output() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_OUTPUT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyField<uint64_t>(verifier, VT_SEQ_NO) &&
           VerifyField<uint64_t>(verifier, VT_TIME) &&
           VerifyOffset(verifier, VT_LCL) &&
           verifier.VerifyVector(lcl()) &&
           VerifyOffset(verifier, VT_STATE_HASH) &&
           verifier.VerifyVector(state_hash()) &&
           VerifyOffset(verifier, VT_PATCH_HASH) &&
           verifier.VerifyVector(patch_hash()) &&
           VerifyOffset(verifier, VT_USERS) &&
           verifier.VerifyVector(users()) &&
           verifier.VerifyVectorOfTables(users()) &&
           VerifyOffset(verifier, VT_INPUTS) &&
           verifier.VerifyVector(inputs()) &&
           verifier.VerifyVectorOfTables(inputs()) &&
           VerifyOffset(verifier, VT_OUTPUT) &&
           verifier.VerifyVector(output()) &&
           verifier.EndTable();
  }
};

struct LedgerBlockBuilder {
  typedef LedgerBlock Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(flatbuffers::Offset<flatbuffers::String> version) {
    fbb_.AddOffset(LedgerBlock::VT_VERSION, version);
  }
  void add_seq_no(uint64_t seq_no) {
    fbb_.AddElement<uint64_t>(LedgerBlock::VT_SEQ_NO, seq_no, 0);
  }
  void add_time(uint64_t time) {
    fbb_.AddElement<uint64_t>(LedgerBlock::VT_TIME, time, 0);
  }
  void add_lcl(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> lcl) {
    fbb_.AddOffset(LedgerBlock::VT_LCL, lcl);
  }
  void add_state_hash(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> state_hash) {
    fbb_.AddOffset(LedgerBlock::VT_STATE_HASH, state_hash);
  }
  void add_patch_hash(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> patch_hash) {
    fbb_.AddOffset(LedgerBlock::VT_PATCH_HASH, patch_hash);
  }
  void add_users(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>>> users) {
    fbb_.AddOffset(LedgerBlock::VT_USERS, users);
  }
  void add_inputs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>>> inputs) {
    fbb_.AddOffset(LedgerBlock::VT_INPUTS, inputs);
  }
  void add_output(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> output) {
    fbb_.AddOffset(LedgerBlock::VT_OUTPUT, output);
  }
  explicit LedgerBlockBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LedgerBlock> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LedgerBlock>(end);
    return o;
  }
};

inline flatbuffers::Offset<LedgerBlock> CreateLedgerBlock(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> version = 0,
    uint64_t seq_no = 0,
    uint64_t time = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> lcl = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> state_hash = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> patch_hash = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>>> users = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<msg::fbuf::ByteArray>>> inputs = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> output = 0) {
  LedgerBlockBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_seq_no(seq_no);
  builder_.add_output(output);
  builder_.add_inputs(inputs);
  builder_.add_users(users);
  builder_.add_patch_hash(patch_hash);
  builder_.add_state_hash(state_hash);
  builder_.add_lcl(lcl);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<LedgerBlock> CreateLedgerBlockDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *version = nullptr,
    uint64_t seq_no = 0,
    uint64_t time = 0,
    const std::vector<uint8_t> *lcl = nullptr,
    const std::vector<uint8_t> *state_hash = nullptr,
    const std::vector<uint8_t> *patch_hash = nullptr,
    const std::vector<flatbuffers::Offset<msg::fbuf::ByteArray>> *users = nullptr,
    const std::vector<flatbuffers::Offset<msg::fbuf::ByteArray>> *inputs = nullptr,
    const std::vector<uint8_t> *output = nullptr) {
  auto version__ = version ? _fbb.CreateString(version) : 0;
  auto lcl__ = lcl ? _fbb.CreateVector<uint8_t>(*lcl) : 0;
  auto state_hash__ = state_hash ? _fbb.CreateVector<uint8_t>(*state_hash) : 0;
  auto patch_hash__ = patch_hash ? _fbb.CreateVector<uint8_t>(*patch_hash) : 0;
  auto users__ = users ? _fbb.CreateVector<flatbuffers::Offset<msg::fbuf::ByteArray>>(*users) : 0;
  auto inputs__ = inputs ? _fbb.CreateVector<flatbuffers::Offset<msg::fbuf::ByteArray>>(*inputs) : 0;
  auto output__ = output ? _fbb.CreateVector<uint8_t>(*output) : 0;
  return msg::fbuf::ledger::CreateLedgerBlock(
      _fbb,
      version__,
      seq_no,
      time,
      lcl__,
      state_hash__,
      patch_hash__,
      users__,
      inputs__,
      output__);
}

inline const msg::fbuf::ledger::LedgerBlock *GetLedgerBlock(const void *buf) {
  return flatbuffers::GetRoot<msg::fbuf::ledger::LedgerBlock>(buf);
}

inline const msg::fbuf::ledger::LedgerBlock *GetSizePrefixedLedgerBlock(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<msg::fbuf::ledger::LedgerBlock>(buf);
}

inline LedgerBlock *GetMutableLedgerBlock(void *buf) {
  return flatbuffers::GetMutableRoot<LedgerBlock>(buf);
}

inline bool VerifyLedgerBlockBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<msg::fbuf::ledger::LedgerBlock>(nullptr);
}

inline bool VerifySizePrefixedLedgerBlockBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<msg::fbuf::ledger::LedgerBlock>(nullptr);
}

inline void FinishLedgerBlockBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<msg::fbuf::ledger::LedgerBlock> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLedgerBlockBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<msg::fbuf::ledger::LedgerBlock> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ledger
}  // namespace fbuf
}  // namespace msg

#endif  // FLATBUFFERS_GENERATED_LEDGERSCHEMA_MSG_FBUF_LEDGER_H_
